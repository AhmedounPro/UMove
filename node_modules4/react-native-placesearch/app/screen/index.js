import React, { Component } from 'react';
import { View, Text, TextInput, StyleSheet, FlatList, Pressable, Image } from 'react-native';
import { Container, Body, Icon, ListItem} from 'native-base';
import Geocoder from 'react-native-geocoder';

Img = 'https://github.com/mdrajibsk8/React-Native-Push-Notification-Firebase7/blob/master/maxresdefault-3.jpg?raw=true';

export default class Placesearch extends Component {
  constructor(props) {
    super(props);
    this.state = {
      API:this.props.apikey,
      country : this.props.country ? '&components=country:'+this.props.country+'&': '&',
      onlyCity : this.props.onlyCity ? '&types=(cities)&': '',
      area : this.props.area ? '&location='+this.props.lat+','+this.props.lng+'&radius='+this.props.radius+'&' : '',
      inputContainer : this.props.InputContainer,
      MainContainer : this.props.MainContainer,
      ListStyle : this.props.ListStyle,
      TextStyle : this.props.ListTextStyle,
      IconStyle : this.props.ListIconStyle,
      ImgStyle : this.props.ImgStyle,
      Img : this.props.Img ? this.props.Img : Img,
      textInput : this.props.textInput,
      placeHolder : this.props.placeHolder ? this.props.placeHolder : "Search for places",
      address:'',
      allAddress: []
    }
  } 


  setAddress = (address) => {
    this.setState({address})
  }
  

  searchAddress = async () => {
    const { area, address, country, onlyCity, API } = this.state ;
    let url = 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input='+address+country+onlyCity+area+'key='+API;
    let response = await fetch(url);
    let responseJson = await response.json();
    this.setState({
      allAddress : responseJson.predictions
    });
  }

  listClick = async (data) => {
    if (this.props.coordinate) {
      Geocoder.geocodeAddress(data.description).then(async res => {
        data.coordinate = res[0].position;
        this.props.SelectedAddress(data);
      })
    }else{
      this.props.SelectedAddress(data);
    }
    
  }

  renderItem = ({item}) => {
    return(
       this.props.ChangList ?
          <Pressable onPress={()=>this.listClick(item)}>
              {this.props.CustomList(item)}
          </Pressable>
       :
          <ListItem 
            style={[styles.Liststyle,this.state.ListStyle]}
            onPress={()=>this.listClick(item)}>
            <Body style={{flexDirection:'row',alignItems:'center',paddingHorizontal:5}}>
              <Icon name="location-pin" type="Entypo" style={[styles.Iconstyle,this.state.IconStyle]} />
              <Text style={[styles.Textstyle,this.state.TextStyle]}>
                {item.description}
              </Text>
            </Body>
          </ListItem>
    )
  }
 
  render() {
    return (
      <Container style={[styles.Container,{backgroundColor : this.props.ContainerBackgroundColor}]}>
       
       {this.props.Changeheader ?
          this.props.CustomHeader
       :
        <View style={[styles.mainInputContainer,this.state.MainContainer]}>
            <View style={[styles.inputContainer2,this.state.inputContainer]}>
              <Icon name="search1" type="AntDesign" style={{marginLeft:20,fontSize:20}}/> 
              <TextInput 
                style={[styles.inputs,this.state.textInput]}
                placeholder={this.props.placeHolder}
                underlineColorAndroid='transparent'
                autoFocus={true}
                returnKeyType="search"
                onKeyPress={this.searchAddress}
                onChangeText={(address) => this.setAddress(address)}
              />
            </View>                
        </View>
        }

        <FlatList
          data={this.state.allAddress}
          extraData={this.state}
          renderItem={this.renderItem}
          keyboardShouldPersistTaps="always"
          keyExtractor={item => item.place_id.toString()}
        />
      { this.props.removeImg ? null :
        <View style={{width:'100%',height:190,position: 'absolute',bottom:0,zIndex:-99}}>
          <Image 
          source={{uri : this.state.Img}}
          style={{width:'100%', height:'100%', resizeMode:'contain'}}
          />
        </View>
      }
    </Container>
    );
  }
}

const styles = StyleSheet.create({

  Container : {
    flex:1,
    backgroundColor:'#000'
  },
  inputs:{
      height:45,
      width:'80%',
      borderColor: '#fff',
      backgroundColor:'#fff',
      marginLeft:10,
      fontFamily:'SourceSansPro-SemiBold'
  },
  mainInputContainer: {
    borderColor:'#76a044',
    flexDirection: 'row',
    alignItems:'center',
    backgroundColor:'#76a044'
  },
  inputContainer2 : {
    flex:1,
    backgroundColor:'#fff',
    marginHorizontal:15,
    marginVertical:10,
    flexDirection:'row',
    alignItems:'center',
    borderRadius:3
  },
  Liststyle : {
    backgroundColor:'rgba(243,246,251,255)',
    marginLeft: 0,
    marginRight:0,
    marginTop: 0,
    borderWidth:0,
    paddingHorizontal: 5,
  },
  Iconstyle : {
    color:'#4b4b4b'
  },
  Textstyle : {
    fontSize:13.5,
    marginHorizontal:7,
    color:'#4b4b4b',
    fontFamily:'SourceSansPro-SemiBold'
  },
  Imgstyle: {
    width: '100%',
    height: 200,
    resizeMode:'center'
  },
  image: {
    flex: 1,
    resizeMode: "contain",
    // justifyContent: "center"
  },

});
